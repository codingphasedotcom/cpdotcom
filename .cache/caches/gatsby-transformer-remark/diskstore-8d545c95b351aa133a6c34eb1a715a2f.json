{"expireTime":9007200816821526000,"key":"transformer-remark-markdown-html-8edb683638592744e961f46ba1b6f3e5-gatsby-remark-imagesgatsby-remark-prismjs-","val":"<iframe src=\"https://www.youtube.com/embed/xt0iUBjL2JI\" width=\"100%\" height=\"400\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n<p>Alright so you have been looking everywhere on how to install laravel in windows 10 bash ubuntu.</p>\n<p>Well here's the tutorial that you have been looking for... but before we start.</p>\n<p>I'm assuming that you have MAMP, mysql workbench and Ubuntu installed. If you don't check this videos before you start this.</p>\n<p><a href=\"https://codingphase.teachable.com/p/all-installations-you-will-need-for-web-development\">https://codingphase.teachable.com/p/all-installations-you-will-need-for-web-development</a>\n<a href=\"https://codingphase.teachable.com/p/all-installations-you-will-need-for-web-development\">https://codingphase.teachable.com/p/all-installations-you-will-need-for-web-development</a></p>\n<p>Alright lets get started.</p>\n<p>1 - Run each one of these commands on your bash ubuntu to get php and composer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> php7.0-cli\n<span class=\"token function\">sudo</span> add-apt-repository ppa:ondrej/php\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> php7.1\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> php-mbstring php-xml php-zip php-fpm php-mysql</code></pre></div>\n<p>2 - install composer run these commands on your bash Ubuntu</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">php -r <span class=\"token string\">\"copy('https://getcomposer.org/installer', 'composer-setup.php');\"</span>\nphp -r <span class=\"token string\">\"if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"</span>\nphp composer-setup.php\nphp -r <span class=\"token string\">\"unlink('composer-setup.php');\"</span>\ncomposer global require <span class=\"token string\">\"laravel/installer\"</span></code></pre></div>\n<p>3 - Change directory into your C drive</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> /mnt/c</code></pre></div>\n<p>4 - Create or find the directory where you want your projects to be, I'm going to create a project folder on the c drive (this is my preference you can put it where you want) then I'm going to go inside of the projects folder</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> projects\n<span class=\"token function\">cd</span> projects</code></pre></div>\n<p>5 - create your laravel project</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">composer create-project --prefer-dist laravel/laravel write-your-project-name-here</code></pre></div>\n<p>6 - change directory to laravel project</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> project-name</code></pre></div>\n<p>7 - Create mysql Database for application I use workbench to create a new schema but if you like you can use phpmyadmin through your browser just make sure collation is utf8mb4</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http://localhost:8888/MAMP/index.php?page<span class=\"token operator\">=</span>phpmyadmin<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>language<span class=\"token operator\">=</span>English</code></pre></div>\n<p>8 - Copy the \".env.example\" in your laravel root to a new file called \".env\"</p>\n<p>9 - put your database information on the .env file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">DB_CONNECTION<span class=\"token operator\">=</span>mysql\nDB_HOST<span class=\"token operator\">=</span>127.0.0.1\nDB_PORT<span class=\"token operator\">=</span>3306\nDB_DATABASE<span class=\"token operator\">=</span>databasename\nDB_USERNAME<span class=\"token operator\">=</span>root\nDB_PASSWORD<span class=\"token operator\">=</span>root</code></pre></div>\n<p>10 - then test your connection to your database by running the migration on your database</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">php artisan migrate:refresh</code></pre></div>\n<p>11 - If you are running an older version of mysql and get a database error</p>\n<p>open app/Providers/AppServiceProvider.php</p>\n<p>12 - add Schema to the top</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Schema</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>13 - and replace boot function with this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">public <span class=\"token keyword\">function</span> boot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Schema::defaultStringLength<span class=\"token punctuation\">(</span>191<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>14 - if you see this message migrations were created successfully you are ready to move on</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Migration table not found.\nMigration table created successfully.\nMigrating: 2014_10_12_000000_create_users_table\nMigrated:  2014_10_12_000000_create_users_table\nMigrating: 2014_10_12_100000_create_password_resets_table\nMigrated:  2014_10_12_100000_create_password_resets_table</code></pre></div>\n<p>15 - Now in your mamp webserver location to the location of your laravel project's public folder let the server restart</p>\n<p>now go to your browser. Put in the browser</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http://localhost:8888</code></pre></div>\n<p>16 - if you get an error saying key not found then run this on your terminal</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">php artisan key:generate</code></pre></div>\n<p>17 - then refresh your browser</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http://localhost:8888</code></pre></div>\n<p>if you see the laravel page then you have successfully installed laravel. You don't have to go through this hassle every time, but you will have to repeat steps 5 to 17 every time you want to start a new project.</p>"}